<div class="min-h-screen flex flex-col">
    <!-- Header -->
    <header class="bg-gradient-to-r from-blue-600 to-indigo-700 text-white shadow-lg no-print">
        <div class="container mx-auto px-4 py-6">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-3xl font-bold">MathQuiz</h1>
                    <p class="text-blue-100">QCM Mathématiques - 2e Secondaire</p>
                </div>
                <div class="hidden md:block">
                    <div class="flex space-x-4">
                        <button id="startButton" class="bg-white text-blue-700 px-4 py-2 rounded-lg font-medium hover:bg-blue-50 transition">Commencer</button>
                        <button id="aboutButton" class="bg-transparent border border-white text-white px-4 py-2 rounded-lg font-medium hover:bg-white hover:bg-opacity-10 transition">À propos</button>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="flex-grow container mx-auto px-4 py-8">
        <!-- Welcome Screen -->
        <div id="welcomeScreen" class="max-w-4xl mx-auto bg-white rounded-xl shadow-md overflow-hidden">
            <div class="p-8">
                <div class="text-center mb-8">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">Bienvenue au QCM de Mathématiques</h2>
                    <p class="text-gray-600">Ce quiz contient 20 questions sur l'algèbre et la géométrie adaptées au niveau de 2e année secondaire en Belgique.</p>
                </div>
                
                <div class="bg-blue-50 rounded-lg p-6 mb-8">
                    <h3 class="font-semibold text-blue-800 mb-3">Instructions :</h3>
                    <ul class="list-disc pl-5 text-gray-700 space-y-2">
                        <li>Chaque question a une seule réponse correcte</li>
                        <li>Vous pouvez naviguer entre les questions</li>
                        <li>À la fin du quiz, vous recevrez un rapport diagnostique détaillé avec graphiques</li>
                        <li>Vous pourrez imprimer votre rapport ou le recevoir par email</li>
                        <li>Durée estimée : 30 minutes</li>
                    </ul>
                </div>
                
                <div class="flex flex-col md:flex-row justify-center space-y-4 md:space-y-0 md:space-x-4">
                    <button id="startQuizButton" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition duration-300 flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                        </svg>
                        Commencer le Quiz
                    </button>
                    <button id="practiceButton" class="bg-white border border-blue-600 text-blue-600 hover:bg-blue-50 font-medium py-3 px-6 rounded-lg transition duration-300">
                        Mode Entraînement
                    </button>
                </div>
            </div>
        </div>

        <!-- Quiz Container -->
        <div id="quizContainer" class="max-w-4xl mx-auto hidden">
            <!-- Tabs -->
            <div class="mb-6 border-b border-gray-200">
                <div class="flex space-x-8">
                    <button id="algebraTab" class="tab-active py-3 px-1 font-medium text-lg">Algèbre</button>
                    <button id="geometryTab" class="text-gray-500 py-3 px-1 font-medium text-lg">Géométrie</button>
                </div>
            </div>

            <!-- Progress Bar -->
            <div class="w-full bg-gray-200 rounded-full h-2.5 mb-6">
                <div id="progressBar" class="bg-blue-600 h-2.5 rounded-full progress-bar" style="width: 0%"></div>
            </div>

            <!-- Question Area -->
            <div id="questionArea" class="bg-white rounded-xl shadow-md p-6 mb-6">
                <div class="mb-6">
                    <span id="questionNumber" class="inline-block bg-blue-100 text-blue-800 text-sm font-medium px-3 py-1 rounded-full mb-3">Question 1/20</span>
                    <h3 id="questionText" class="text-xl font-semibold text-gray-800">Résoudre l'équation : \(2x + 3 = 9\)</h3>
                </div>

                <div id="optionsContainer" class="space-y-3">
                    <!-- Options will be generated dynamically -->
                </div>
            </div>

            <!-- Navigation Buttons -->
            <div class="flex justify-between">
                <button id="prevButton" class="bg-gray-200 text-gray-700 px-5 py-2 rounded-lg font-medium hover:bg-gray-300 transition disabled:opacity-50" disabled>Précédent</button>
                <button id="nextButton" class="bg-blue-600 text-white px-5 py-2 rounded-lg font-medium hover:bg-blue-700 transition">Suivant</button>
            </div>
        </div>

        <!-- Results Screen -->
        <div id="resultsScreen" class="max-w-4xl mx-auto hidden">
            <div class="bg-white rounded-xl shadow-md overflow-hidden">
                <div class="p-8">
                    <div class="text-center mb-8">
                        <div class="inline-block p-4 rounded-full bg-blue-100 mb-4">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                        <h2 class="text-2xl font-bold text-gray-800 mb-2">Quiz Terminé !</h2>
                        <p class="text-gray-600">Voici votre rapport de performance</p>
                    </div>

                    <div id="reportContent">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                            <div class="bg-blue-50 rounded-lg p-5 text-center">
                                <p class="text-gray-600 mb-1">Score Total</p>
                                <p id="totalScore" class="text-3xl font-bold text-blue-700">0/20</p>
                            </div>
                            <div class="bg-blue-50 rounded-lg p-5 text-center">
                                <p class="text-gray-600 mb-1">Algèbre</p>
                                <p id="algebraScore" class="text-3xl font-bold text-blue-700">0/10</p>
                            </div>
                            <div class="bg-blue-50 rounded-lg p-5 text-center">
                                <p class="text-gray-600 mb-1">Géométrie</p>
                                <p id="geometryScore" class="text-3xl font-bold text-blue-700">0/10</p>
                            </div>
                        </div>

                        <!-- Graphiques -->
                        <div class="mb-8">
                            <h3 class="text-xl font-semibold text-gray-800 mb-4">Rapport Graphique</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div class="bg-white border border-gray-200 rounded-lg p-4 print-break-inside-avoid">
                                    <h4 class="text-lg font-medium text-gray-700 mb-3">Performance par Catégorie</h4>
                                    <div class="chart-container">
                                        <canvas id="categoryChart"></canvas>
                                    </div>
                                </div>
                                <div class="bg-white border border-gray-200 rounded-lg p-4 print-break-inside-avoid">
                                    <h4 class="text-lg font-medium text-gray-700 mb-3">Répartition des Réponses</h4>
                                    <div class="chart-container">
                                        <canvas id="answersChart"></canvas>
                                    </div>
                                </div>
                                <div class="bg-white border border-gray-200 rounded-lg p-4 md:col-span-2 print-break-inside-avoid">
                                    <h4 class="text-lg font-medium text-gray-700 mb-3">Analyse Détaillée par Question</h4>
                                    <div class="chart-container" style="height: 300px;">
                                        <canvas id="questionsChart"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-8 print-break-inside-avoid">
                            <h3 class="text-xl font-semibold text-gray-800 mb-4">Recommandations</h3>
                            <div id="recommendations" class="bg-gray-50 rounded-lg p-5">
                                <!-- Will be filled dynamically -->
                            </div>
                        </div>

                        <div class="mb-8">
                            <h3 class="text-xl font-semibold text-gray-800 mb-4">Rapport Détaillé</h3>
                            <div id="detailedReport" class="bg-gray-50 rounded-lg p-5 space-y-4">
                                <!-- Will be filled dynamically -->
                            </div>
                        </div>
                    </div>

                    <!-- Email Form -->
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-5 mb-8 no-print">
                        <div class="flex justify-between items-center">
                            <h3 class="text-lg font-semibold text-blue-800">Recevoir le rapport par email</h3>
                            <button id="toggleEmailForm" class="text-blue-600 hover:text-blue-800">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                                </svg>
                            </button>
                        </div>
                        
                        <div id="emailForm" class="mt-4">
                            <div class="space-y-4">
                                <div>
                                    <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Nom</label>
                                    <input type="text" id="name" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                                </div>
                                <div>
                                    <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                                    <input type="email" id="email" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                                </div>
                                <div class="flex justify-end">
                                    <button id="sendReportButton" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-lg transition duration-300 flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                            <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                                            <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                                        </svg>
                                        Envoyer le rapport
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="flex flex-col md:flex-row justify-center space-y-4 md:space-y-0 md:space-x-4 no-print">
                        <button id="retryButton" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition duration-300">
                            Recommencer le Quiz
                        </button>
                        <button id="reviewButton" class="bg-white border border-blue-600 text-blue-600 hover:bg-blue-50 font-medium py-3 px-6 rounded-lg transition duration-300">
                            Revoir les Questions
                        </button>
                        <button id="printReportButton" class="bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-6 rounded-lg transition duration-300 flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5 4v3H4a2 2 0 00-2 2v3a2 2 0 002 2h1v2a2 2 0 002 2h6a2 2 0 002-2v-2h1a2 2 0 002-2V9a2 2 0 00-2-2h-1V4a2 2 0 00-2-2H7a2 2 0 00-2 2zm8 0H7v3h6V4zm0 8H7v4h6v-4z" clip-rule="evenodd" />
                            </svg>
                            Imprimer le Rapport
                        </button>
                        <button id="downloadPdfButton" class="bg-purple-600 hover:bg-purple-700 text-white font-medium py-3 px-6 rounded-lg transition duration-300 flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                            Télécharger PDF
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Print Report Template -->
        <div id="printTemplate" class="hidden print-only">
            <div class="p-8">
                <div class="text-center mb-8">
                    <h1 class="text-3xl font-bold text-gray-800 mb-2">Rapport Diagnostique MathQuiz</h1>
                    <p class="text-gray-600" id="printDate"></p>
                </div>
                
                <div class="grid grid-cols-3 gap-6 mb-8">
                    <div class="bg-blue-50 rounded-lg p-5 text-center">
                        <p class="text-gray-600 mb-1">Score Total</p>
                        <p id="printTotalScore" class="text-3xl font-bold text-blue-700">0/20</p>
                    </div>
                    <div class="bg-blue-50 rounded-lg p-5 text-center">
                        <p class="text-gray-600 mb-1">Algèbre</p>
                        <p id="printAlgebraScore" class="text-3xl font-bold text-blue-700">0/10</p>
                    </div>
                    <div class="bg-blue-50 rounded-lg p-5 text-center">
                        <p class="text-gray-600 mb-1">Géométrie</p>
                        <p id="printGeometryScore" class="text-3xl font-bold text-blue-700">0/10</p>
                    </div>
                </div>
                
                <div class="mb-8">
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Graphiques d'Analyse</h3>
                    <div id="printCharts" class="grid grid-cols-2 gap-6">
                        <!-- Charts will be copied here for printing -->
                    </div>
                </div>
                
                <div class="mb-8">
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Recommandations</h3>
                    <div id="printRecommendations" class="bg-gray-50 rounded-lg p-5">
                        <!-- Will be filled dynamically -->
                    </div>
                </div>
                
                <div>
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Détail des Réponses</h3>
                    <div id="printDetailedReport" class="bg-gray-50 rounded-lg p-5">
                        <!-- Will be filled dynamically -->
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-6 no-print">
        <div class="container mx-auto px-4">
            <div class="flex flex-col md:flex-row justify-between items-center">
                <div class="mb-4 md:mb-0">
                    <p>&copy; 2023 MathQuiz - Tous droits réservés</p>
                </div>
                <div class="flex space-x-4">
                    <a href="#" class="hover:text-blue-300 transition">Conditions d'utilisation</a>
                    <a href="#" class="hover:text-blue-300 transition">Politique de confidentialité</a>
                    <a href="#" class="hover:text-blue-300 transition">Contact</a>
                </div>
            </div>
        </div>
    </footer>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize jsPDF
        const { jsPDF } = window.jspdf;

        // Quiz data
        const quizData = {
            algebra: [
                {
                    question: "Résoudre l'équation : \\(2x + 3 = 9\\)",
                    options: ["\\(x = 2\\)", "\\(x = 3\\)", "\\(x = 4\\)", "\\(x = 6\\)"],
                    correctAnswer: 1,
                    explanation: "Pour résoudre 2x + 3 = 9, on soustrait 3 des deux côtés : 2x = 6, puis on divise par 2 : x = 3.",
                    category: "Équations"
                },
                {
                    question: "Factoriser l'expression : \\(x^2 - 4\\)",
                    options: ["\\((x-2)(x+2)\\)", "\\((x-4)(x+1)\\)", "\\((x-2)(x-2)\\)", "\\(x(x-4)\\)"],
                    correctAnswer: 0,
                    explanation: "x² - 4 est une différence de carrés : x² - 2² = (x-2)(x+2)",
                    category: "Factorisation"
                },
                {
                    question: "Quelle est la valeur de \\(3^2 \\times 3^3\\) ?",
                    options: ["\\(3^5\\)", "\\(3^6\\)", "\\(9^3\\)", "\\(27^2\\)"],
                    correctAnswer: 0,
                    explanation: "Quand on multiplie des puissances de même base, on additionne les exposants : 3² × 3³ = 3²⁺³ = 3⁵",
                    category: "Puissances"
                },
                {
                    question: "Simplifier la fraction : \\(\\frac{15x^2y}{5xy^2}\\)",
                    options: ["\\(3xy^{-1}\\)", "\\(3x\\)", "\\(\\frac{3x}{y}\\)", "\\(\\frac{3x^2}{y}\\)"],
                    correctAnswer: 2,
                    explanation: "En simplifiant : (15x²y)/(5xy²) = 3x/y",
                    category: "Fractions"
                },
                {
                    question: "Développer l'expression : \\((x+2)(x-3)\\)",
                    options: ["\\(x^2 - x - 6\\)", "\\(x^2 - 3x + 2x - 6\\)", "\\(x^2 + 2x - 3x - 6\\)", "\\(x^2 - x - 5\\)"],
                    correctAnswer: 0,
                    explanation: "(x+2)(x-3) = x² - 3x + 2x - 6 = x² - x - 6",
                    category: "Développement"
                },
                {
                    question: "Résoudre l'inéquation : \\(2x - 5 > 3\\)",
                    options: ["\\(x > 4\\)", "\\(x < 4\\)", "\\(x > -1\\)", "\\(x < -1\\)"],
                    correctAnswer: 0,
                    explanation: "2x - 5 > 3 ⟹ 2x > 8 ⟹ x > 4",
                    category: "Inéquations"
                },
                {
                    question: "Si \\(f(x) = 2x^2 - 3\\), quelle est la valeur de \\(f(2)\\) ?",
                    options: ["5", "8", "5", "13"],
                    correctAnswer: 0,
                    explanation: "f(2) = 2(2)² - 3 = 2(4) - 3 = 8 - 3 = 5",
                    category: "Fonctions"
                },
                {
                    question: "Quelle est la solution du système d'équations : \\(\\begin{cases} x + y = 5 \\\\ x - y = 1 \\end{cases}\\)",
                    options: ["\\(x=3, y=2\\)", "\\(x=2, y=3\\)", "\\(x=4, y=1\\)", "\\(x=1, y=4\\)"],
                    correctAnswer: 0,
                    explanation: "En additionnant les équations : 2x = 6 ⟹ x = 3. Puis y = 5 - 3 = 2.",
                    category: "Systèmes"
                },
                {
                    question: "Simplifier l'expression : \\(\\frac{x^2-9}{x-3}\\) pour \\(x \\neq 3\\)",
                    options: ["\\(x+3\\)", "\\(x-3\\)", "\\(x^2+3\\)", "\\(\\frac{x-3}{x+3}\\)"],
                    correctAnswer: 0,
                    explanation: "(x²-9)/(x-3) = (x²-3²)/(x-3) = (x-3)(x+3)/(x-3) = x+3 pour x≠3",
                    category: "Fractions"
                },
                {
                    question: "Quelle est la forme factorisée de \\(x^2 + 6x + 9\\) ?",
                    options: ["\\((x+3)^2\\)", "\\((x-3)^2\\)", "\\((x+3)(x+3)\\)", "\\(x^2(1+6+9)\\)"],
                    correctAnswer: 0,
                    explanation: "x² + 6x + 9 = x² + 2(3x) + 3² = (x+3)²",
                    category: "Factorisation"
                }
            ],
            geometry: [
                {
                    question: "Quelle est l'aire d'un rectangle de longueur 8 cm et de largeur 5 cm ?",
                    options: ["13 cm²", "26 cm²", "40 cm²", "80 cm²"],
                    correctAnswer: 2,
                    explanation: "L'aire d'un rectangle est longueur × largeur = 8 × 5 = 40 cm²",
                    category: "Aires"
                },
                {
                    question: "Dans un triangle rectangle, si un angle mesure 90° et un autre 37°, combien mesure le troisième angle ?",
                    options: ["53°", "43°", "63°", "27°"],
                    correctAnswer: 0,
                    explanation: "La somme des angles d'un triangle est 180°. Donc le troisième angle = 180° - 90° - 37° = 53°",
                    category: "Angles"
                },
                {
                    question: "Quelle est la formule du périmètre d'un cercle de rayon r ?",
                    options: ["\\(\\pi r\\)", "\\(2\\pi r\\)", "\\(\\pi r^2\\)", "\\(2\\pi r^2\\)"],
                    correctAnswer: 1,
                    explanation: "Le périmètre (ou circonférence) d'un cercle est 2πr",
                    category: "Cercles"
                },
                {
                    question: "Un triangle a des côtés de longueurs 3 cm, 4 cm et 5 cm. De quel type de triangle s'agit-il ?",
                    options: ["Triangle équilatéral", "Triangle isocèle", "Triangle rectangle", "Triangle quelconque"],
                    correctAnswer: 2,
                    explanation: "D'après le théorème de Pythagore : 3² + 4² = 9 + 16 = 25 = 5². C'est donc un triangle rectangle.",
                    category: "Triangles"
                },
                {
                    question: "Quelle est l'aire d'un carré de côté 6 cm ?",
                    options: ["12 cm²", "24 cm²", "30 cm²", "36 cm²"],
                    correctAnswer: 3,
                    explanation: "L'aire d'un carré est côté² = 6² = 36 cm²",
                    category: "Aires"
                },
                {
                    question: "Deux droites sont parallèles si :",
                    options: ["Elles se coupent en un point", "Elles ont la même pente", "Elles sont perpendiculaires", "Elles forment un angle de 45°"],
                    correctAnswer: 1,
                    explanation: "Deux droites sont parallèles si et seulement si elles ont la même pente (ou coefficient directeur)",
                    category: "Droites"
                },
                {
                    question: "Quelle est la somme des angles intérieurs d'un quadrilatère ?",
                    options: ["180°", "270°", "360°", "540°"],
                    correctAnswer: 2,
                    explanation: "La somme des angles intérieurs d'un polygone à n côtés est (n-2)×180°. Pour n=4, c'est 2×180° = 360°",
                    category: "Angles"
                },
                {
                    question: "Dans un triangle isocèle, que peut-on dire des angles ?",
                    options: ["Tous les angles sont égaux", "Deux angles sont égaux", "La somme des angles est 90°", "Aucun angle n'est égal"],
                    correctAnswer: 1,
                    explanation: "Dans un triangle isocèle, les angles opposés aux côtés égaux sont égaux",
                    category: "Triangles"
                },
                {
                    question: "Quelle est l'aire d'un triangle de base 8 cm et de hauteur 5 cm ?",
                    options: ["20 cm²", "40 cm²", "13 cm²", "10 cm²"],
                    correctAnswer: 0,
                    explanation: "L'aire d'un triangle est (base × hauteur)/2 = (8 × 5)/2 = 20 cm²",
                    category: "Aires"
                },
                {
                    question: "Si deux triangles sont semblables avec un rapport de similitude de 2, quel est le rapport de leurs aires ?",
                    options: ["2", "4", "8", "1/2"],
                    correctAnswer: 1,
                    explanation: "Le rapport des aires de deux figures semblables est égal au carré du rapport de similitude : 2² = 4",
                    category: "Similitude"
                }
            ]
        };

        // Variables
        let currentSection = 'algebra';
        let currentQuestionIndex = 0;
        let userAnswers = {
            algebra: Array(10).fill(null),
            geometry: Array(10).fill(null)
        };
        let charts = {};
        
        // DOM Elements
        const welcomeScreen = document.getElementById('welcomeScreen');
        const quizContainer = document.getElementById('quizContainer');
        const resultsScreen = document.getElementById('resultsScreen');
        const questionNumber = document.getElementById('questionNumber');
        const questionText = document.getElementById('questionText');
        const optionsContainer = document.getElementById('optionsContainer');
        const progressBar = document.getElementById('progressBar');
        const prevButton = document.getElementById('prevButton');
        const nextButton = document.getElementById('nextButton');
        const algebraTab = document.getElementById('algebraTab');
        const geometryTab = document.getElementById('geometryTab');
        const emailForm = document.getElementById('emailForm');
        const toggleEmailForm = document.getElementById('toggleEmailForm');
        const toast = document.getElementById('toast');
        
        // Start Quiz Buttons
        document.getElementById('startButton').addEventListener('click', startQuiz);
        document.getElementById('startQuizButton').addEventListener('click', startQuiz);
        
        // Navigation Buttons
        prevButton.addEventListener('click', goToPreviousQuestion);
        nextButton.addEventListener('click', goToNextQuestion);
        
        // Tab Buttons
        algebraTab.addEventListener('click', () => switchSection('algebra'));
        geometryTab.addEventListener('click', () => switchSection('geometry'));
        
        // Results Screen Buttons
        document.getElementById('retryButton').addEventListener('click', resetQuiz);
        document.getElementById('reviewButton').addEventListener('click', reviewQuiz);
        document.getElementById('sendReportButton').addEventListener('click', sendReportByEmail);
        document.getElementById('printReportButton').addEventListener('click', printReport);
        document.getElementById('downloadPdfButton').addEventListener('click', downloadPDF);
        
        // Toggle Email Form
        toggleEmailForm.addEventListener('click', function() {
            emailForm.classList.toggle('active');
            const isExpanded = emailForm.classList.contains('active');
            toggleEmailForm.innerHTML = isExpanded 
                ? '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" /></svg>'
                : '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>';
        });
        
        // Show toast notification
        function showToast(message, type = 'success') {
            toast.textContent = message;
            toast.className = `toast ${type === 'success' ? 'bg-green-600' : 'bg-red-600'} shadow-lg show`;
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }
        
        // Start the quiz
        function startQuiz() {
            welcomeScreen.classList.add('hidden');
            quizContainer.classList.remove('hidden');
            resultsScreen.classList.add('hidden');
            loadQuestion();
        }
        
        // Load current question
        function loadQuestion() {
            const currentQuestion = quizData[currentSection][currentQuestionIndex];
            const totalQuestions = quizData.algebra.length + quizData.geometry.length;
            const currentQuestionNumber = (currentSection === 'algebra' ? currentQuestionIndex + 1 : quizData.algebra.length + currentQuestionIndex + 1);
            
            // Update question number and text
            questionNumber.textContent = `Question ${currentQuestionNumber}/${totalQuestions}`;
            questionText.innerHTML = currentQuestion.question;
            
            // Update progress bar
            const progress = (currentQuestionNumber / totalQuestions) * 100;
            progressBar.style.width = `${progress}%`;
            
            // Update navigation buttons
            prevButton.disabled = currentSection === 'algebra' && currentQuestionIndex === 0;
            nextButton.textContent = isLastQuestion() ? 'Terminer' : 'Suivant';
            
            // Update tabs
            algebraTab.className = currentSection === 'algebra' ? 'tab-active py-3 px-1 font-medium text-lg' : 'text-gray-500 py-3 px-1 font-medium text-lg';
            geometryTab.className = currentSection === 'geometry' ? 'tab-active py-3 px-1 font-medium text-lg' : 'text-gray-500 py-3 px-1 font-medium text-lg';
            
            // Clear options container
            optionsContainer.innerHTML = '';
            
            // Add options
            currentQuestion.options.forEach((option, index) => {
                const isSelected = userAnswers[currentSection][currentQuestionIndex] === index;
                const optionDiv = document.createElement('div');
                optionDiv.className = 'option-label flex items-center p-3 border rounded-lg cursor-pointer ' + 
                                     (isSelected ? 'bg-blue-100 border-blue-300' : 'border-gray-200 hover:border-blue-200');
                optionDiv.innerHTML = `
                    <input type="radio" name="question" id="option${index}" class="mr-3 h-4 w-4 text-blue-600" ${isSelected ? 'checked' : ''}>
                    <label for="option${index}" class="flex-grow cursor-pointer">${option}</label>
                `;
                optionDiv.addEventListener('click', () => selectOption(index));
                optionsContainer.appendChild(optionDiv);
            });
            
            // Render math formulas
            if (window.MathJax) {
                MathJax.typesetPromise();
            }
        }
        
        // Select an option
        function selectOption(optionIndex) {
            userAnswers[currentSection][currentQuestionIndex] = optionIndex;
            loadQuestion(); // Reload to update selected state
        }
        
        // Go to previous question
        function goToPreviousQuestion() {
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                loadQuestion();
            } else if (currentSection === 'geometry') {
                currentSection = 'algebra';
                currentQuestionIndex = quizData.algebra.length - 1;
                loadQuestion();
            }
        }
        
        // Go to next question
        function goToNextQuestion() {
            if (isLastQuestion()) {
                showResults();
            } else if (currentQuestionIndex < quizData[currentSection].length - 1) {
                currentQuestionIndex++;
                loadQuestion();
            } else if (currentSection === 'algebra') {
                currentSection = 'geometry';
                currentQuestionIndex = 0;
                loadQuestion();
            }
        }
        
        // Switch section (algebra/geometry)
        function switchSection(section) {
            currentSection = section;
            currentQuestionIndex = 0;
            loadQuestion();
        }
        
        // Check if current question is the last one
        function isLastQuestion() {
            return currentSection === 'geometry' && currentQuestionIndex === quizData.geometry.length - 1;
        }
        
        // Show results screen
        function showResults() {
            quizContainer.classList.add('hidden');
            resultsScreen.classList.remove('hidden');
            
            // Calculate scores
            const algebraScore = calculateSectionScore('algebra');
            const geometryScore = calculateSectionScore('geometry');
            const totalScore = algebraScore + geometryScore;
            
            // Update score displays
            document.getElementById('algebraScore').textContent = `${algebraScore}/${quizData.algebra.length}`;
            document.getElementById('geometryScore').textContent = `${geometryScore}/${quizData.geometry.length}`;
            document.getElementById('totalScore').textContent = `${totalScore}/${quizData.algebra.length + quizData.geometry.length}`;
            
            // Generate recommendations
            generateRecommendations(algebraScore, geometryScore);
            
            // Generate detailed report
            generateDetailedReport();
            
            // Generate charts
            generateCharts(algebraScore, geometryScore);
        }
        
        // Calculate score for a section
        function calculateSectionScore(section) {
            return userAnswers[section].reduce((score, answer, index) => {
                return score + (answer === quizData[section][index].correctAnswer ? 1 : 0);
            }, 0);
        }
        
        // Generate recommendations
        function generateRecommendations(algebraScore, geometryScore) {
            const recommendationsDiv = document.getElementById('recommendations');
            const totalScore = algebraScore + geometryScore;
            const totalQuestions = quizData.algebra.length + quizData.geometry.length;
            
            let recommendations = '';
            if (totalScore / totalQuestions >= 0.8) {
                recommendations += '<p class="text-green-700 font-medium mb-2">Excellent travail ! Vous maîtrisez bien les concepts de mathématiques.</p>';
            } else if (totalScore / totalQuestions >= 0.6) {
                recommendations += '<p class="text-blue-700 font-medium mb-2">Bon travail ! Vous avez une bonne compréhension des concepts, mais il y a encore place à l\'amélioration.</p>';
            } else {
                recommendations += '<p class="text-red-700 font-medium mb-2">Des révisions supplémentaires sont nécessaires pour renforcer votre compréhension des concepts mathématiques.</p>';
            }
            
            // Add specific recommendations based on category performance
            const weakCategories = [];
            const strongCategories = [];
            
            // Collect data by subcategories
            const categories = {};
            const categoryScores = {};
            
            // Process algebra questions
            quizData.algebra.forEach((question, index) => {
                const category = question.category;
                if (!categories[category]) {
                    categories[category] = 0;
                    categoryScores[category] = 0;
                }
                categories[category]++;
                if (userAnswers.algebra[index] === question.correctAnswer) {
                    categoryScores[category]++;
                }
            });
            
            // Process geometry questions
            quizData.geometry.forEach((question, index) => {
                const category = question.category;
                if (!categories[category]) {
                    categories[category] = 0;
                    categoryScores[category] = 0;
                }
                categories[category]++;
                if (userAnswers.geometry[index] === question.correctAnswer) {
                    categoryScores[category]++;
                }
            });
            
            // Identify weak and strong categories
            Object.keys(categories).forEach(category => {
                const score = categoryScores[category] / categories[category];
                if (score < 0.5) {
                    weakCategories.push(category);
                } else if (score >= 0.8) {
                    strongCategories.push(category);
                }
            });
            
            if (weakCategories.length > 0) {
                recommendations += `<p class="text-gray-700 mb-2">Domaines à améliorer : <span class="font-medium">${weakCategories.join(', ')}</span></p>`;
                recommendations += '<p class="text-gray-700 mb-2">Nous vous recommandons de revoir ces concepts et de faire des exercices supplémentaires dans ces domaines.</p>';
            }
            
            if (strongCategories.length > 0) {
                recommendations += `<p class="text-gray-700 mb-2">Points forts : <span class="font-medium">${strongCategories.join(', ')}</span></p>`;
            }
            
            recommendationsDiv.innerHTML = recommendations;
        }
        
        // Generate detailed report
        function generateDetailedReport() {
            const detailedReport = document.getElementById('detailedReport');
            detailedReport.innerHTML = '';
            
            // Add algebra section
            const algebraReport = document.createElement('div');
            algebraReport.innerHTML = `<h4 class="font-semibold text-blue-800 mb-2">Algèbre</h4>`;
            const algebraList = document.createElement('ul');
            algebraList.className = 'space-y-2';
            
            quizData.algebra.forEach((question, index) => {
                const userAnswer = userAnswers.algebra[index];
                const isCorrect = userAnswer === question.correctAnswer;
                
                const listItem = document.createElement('li');
                listItem.className = `flex items-start ${isCorrect ? 'text-green-700' : 'text-red-700'}`;
                listItem.innerHTML = `
                    <span class="mr-2">${isCorrect ? '✓' : '✗'}</span>
                    <div>
                        <p class="font-medium">${question.question}</p>
                        <p class="text-sm text-gray-600">Votre réponse: ${userAnswer !== null ? question.options[userAnswer] : 'Non répondu'}</p>
                        ${!isCorrect ? `<p class="text-sm text-gray-600">Réponse correcte: ${question.options[question.correctAnswer]}</p>` : ''}
                        <p class="text-sm text-gray-700 mt-1">${question.explanation}</p>
                    </div>
                `;
                algebraList.appendChild(listItem);
            });
            
            algebraReport.appendChild(algebraList);
            detailedReport.appendChild(algebraReport);
            
            // Add geometry section
            const geometryReport = document.createElement('div');
            geometryReport.innerHTML = `<h4 class="font-semibold text-blue-800 mt-4 mb-2">Géométrie</h4>`;
            const geometryList = document.createElement('ul');
            geometryList.className = 'space-y-2';
            
            quizData.geometry.forEach((question, index) => {
                const userAnswer = userAnswers.geometry[index];
                const isCorrect = userAnswer === question.correctAnswer;
                
                const listItem = document.createElement('li');
                listItem.className = `flex items-start ${isCorrect ? 'text-green-700' : 'text-red-700'}`;
                listItem.innerHTML = `
                    <span class="mr-2">${isCorrect ? '✓' : '✗'}</span>
                    <div>
                        <p class="font-medium">${question.question}</p>
                        <p class="text-sm text-gray-600">Votre réponse: ${userAnswer !== null ? question.options[userAnswer] : 'Non répondu'}</p>
                        ${!isCorrect ? `<p class="text-sm text-gray-600">Réponse correcte: ${question.options[question.correctAnswer]}</p>` : ''}
                        <p class="text-sm text-gray-700 mt-1">${question.explanation}</p>
                    </div>
                `;
                geometryList.appendChild(listItem);
            });
            
            geometryReport.appendChild(geometryList);
            detailedReport.appendChild(geometryReport);
            
            // Render math formulas in the report
            if (window.MathJax) {
                MathJax.typesetPromise();
            }
        }
        
        // Generate charts for the results
        function generateCharts(algebraScore, geometryScore) {
            // Destroy existing charts if they exist
            Object.values(charts).forEach(chart => {
                if (chart) chart.destroy();
            });
            
            // Chart 1: Performance by Category
            const ctxCategory = document.getElementById('categoryChart').getContext('2d');
            charts.category = new Chart(ctxCategory, {
                type: 'bar',
                data: {
                    labels: ['Algèbre', 'Géométrie'],
                    datasets: [{
                        label: 'Score',
                        data: [
                            (algebraScore / quizData.algebra.length) * 100,
                            (geometryScore / quizData.geometry.length) * 100
                        ],
                        backgroundColor: [
                            'rgba(54, 162, 235, 0.7)',
                            'rgba(75, 192, 192, 0.7)'
                        ],
                        borderColor: [
                            'rgba(54, 162, 235, 1)',
                            'rgba(75, 192, 192, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            title: {
                                display: true,
                                text: 'Pourcentage (%)'
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: false
                        },
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `Score: ${context.raw.toFixed(1)}%`;
                                }
                            }
                        }
                    }
                }
            });
            
            // Chart 2: Answers Distribution
            const correctAnswers = userAnswers.algebra.filter((answer, index) => answer === quizData.algebra[index].correctAnswer).length +
                                  userAnswers.geometry.filter((answer, index) => answer === quizData.geometry[index].correctAnswer).length;
            const incorrectAnswers = userAnswers.algebra.filter((answer, index) => answer !== null && answer !== quizData.algebra[index].correctAnswer).length +
                                    userAnswers.geometry.filter((answer, index) => answer !== null && answer !== quizData.geometry[index].correctAnswer).length;
            const unanswered = userAnswers.algebra.filter(answer => answer === null).length +
                              userAnswers.geometry.filter(answer => answer === null).length;
            
            const ctxAnswers = document.getElementById('answersChart').getContext('2d');
            charts.answers = new Chart(ctxAnswers, {
                type: 'doughnut',
                data: {
                    labels: ['Correctes', 'Incorrectes', 'Sans réponse'],
                    datasets: [{
                        data: [correctAnswers, incorrectAnswers, unanswered],
                        backgroundColor: [
                            'rgba(75, 192, 192, 0.7)',
                            'rgba(255, 99, 132, 0.7)',
                            'rgba(201, 203, 207, 0.7)'
                        ],
                        borderColor: [
                            'rgba(75, 192, 192, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(201, 203, 207, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
            
            // Chart 3: Detailed Analysis by Category
            // Collect data by subcategories
            const categories = {};
            const categoryScores = {};
            
            // Process algebra questions
            quizData.algebra.forEach((question, index) => {
                const category = question.category;
                if (!categories[category]) {
                    categories[category] = 0;
                    categoryScores[category] = 0;
                }
                categories[category]++;
                if (userAnswers.algebra[index] === question.correctAnswer) {
                    categoryScores[category]++;
                }
            });
            
            // Process geometry questions
            quizData.geometry.forEach((question, index) => {
                const category = question.category;
                if (!categories[category]) {
                    categories[category] = 0;
                    categoryScores[category] = 0;
                }
                categories[category]++;
                if (userAnswers.geometry[index] === question.correctAnswer) {
                    categoryScores[category]++;
                }
            });
            
            // Prepare data for chart
            const categoryLabels = Object.keys(categories);
            const categoryData = categoryLabels.map(category => (categoryScores[category] / categories[category]) * 100);
            
            const ctxQuestions = document.getElementById('questionsChart').getContext('2d');
            charts.questions = new Chart(ctxQuestions, {
                type: 'radar',
                data: {
                    labels: categoryLabels,
                    datasets: [{
                        label: 'Performance (%)',
                        data: categoryData,
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 2,
                        pointBackgroundColor: 'rgba(54, 162, 235, 1)',
                        pointRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        r: {
                            angleLines: {
                                display: true
                            },
                            suggestedMin: 0,
                            suggestedMax: 100
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw.toFixed(1);
                                    const totalQuestions = categories[label];
                                    const correctAnswers = categoryScores[label];
                                    return `${label}: ${correctAnswers}/${totalQuestions} (${value}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }
        
        // Reset quiz
        function resetQuiz() {
            currentSection = 'algebra';
            currentQuestionIndex = 0;
            userAnswers = {
                algebra: Array(10).fill(null),
                geometry: Array(10).fill(null)
            };
            startQuiz();
        }
        
        // Review quiz
        function reviewQuiz() {
            resultsScreen.classList.add('hidden');
            quizContainer.classList.remove('hidden');
            currentSection = 'algebra';
            currentQuestionIndex = 0;
            loadQuestion();
        }
        
        // Send report by email
        function sendReportByEmail() {
            const nameInput = document.getElementById('name');
            const emailInput = document.getElementById('email');
            
            // Simple validation
            if (!nameInput.value.trim()) {
                showToast('Veuillez entrer votre nom', 'error');
                nameInput.focus();
                return;
            }
            
            if (!emailInput.value.trim() || !isValidEmail(emailInput.value)) {
                showToast('Veuillez entrer une adresse email valide', 'error');
                emailInput.focus();
                return;
            }
            
            // In a real application, this would send the data to a server
            // For this demo, we'll simulate a successful email send
            
            // Show loading state
            const button = document.getElementById('sendReportButton');
            const originalButtonText = button.innerHTML;
            button.innerHTML = `
                <svg class="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Envoi en cours...
            `;
            button.disabled = true;
            
            // Simulate API call
            setTimeout(() => {
                button.innerHTML = originalButtonText;
                button.disabled = false;
                
                // Close the form
                emailForm.classList.remove('active');
                toggleEmailForm.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>';
                
                // Clear form
                nameInput.value = '';
                emailInput.value = '';
                
                // Show success message
                showToast(`Rapport envoyé à ${emailInput.value}`, 'success');
            }, 1500);
        }
        
        // Validate email format
        function isValidEmail(email) {
            const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(String(email).toLowerCase());
        }
        
        // Print report
        function printReport() {
            // Update print template with current data
            document.getElementById('printDate').textContent = new Date().toLocaleDateString();
            document.getElementById('printTotalScore').textContent = document.getElementById('totalScore').textContent;
            document.getElementById('printAlgebraScore').textContent = document.getElementById('algebraScore').textContent;
            document.getElementById('printGeometryScore').textContent = document.getElementById('geometryScore').textContent;
            
            // Copy recommendations
            document.getElementById('printRecommendations').innerHTML = document.getElementById('recommendations').innerHTML;
            
            // Copy detailed report
            document.getElementById('printDetailedReport').innerHTML = document.getElementById('detailedReport').innerHTML;
            
            // Print the report
            window.print();
        }
        
        // Download report as PDF
        async function downloadPDF() {
            // Show loading toast
            showToast('Génération du PDF en cours...', 'success');
            
            try {
                // Create a new jsPDF instance
                const pdf = new jsPDF('p', 'mm', 'a4');
                const reportContent = document.getElementById('reportContent');
                
                // Get the content to be converted to PDF
                const canvas = await html2canvas(reportContent, {
                    scale: 2,
                    useCORS: true,
                    logging: false
                });
                
                // Calculate dimensions to fit on A4
                const imgWidth = 210; // A4 width in mm
                const pageHeight = 297; // A4 height in mm
                const imgHeight = (canvas.height * imgWidth) / canvas.width;
                let heightLeft = imgHeight;
                let position = 0;
                
                // Add title
                pdf.setFontSize(18);
                pdf.setTextColor(0, 0, 128);
                pdf.text('Rapport Diagnostique MathQuiz', 105, 15, { align: 'center' });
                pdf.setFontSize(12);
                pdf.setTextColor(100, 100, 100);
                pdf.text(`Date: ${new Date().toLocaleDateString()}`, 105, 22, { align: 'center' });
                
                // Add image of the report content
                const imgData = canvas.toDataURL('image/png');
                pdf.addImage(imgData, 'PNG', 0, 30, imgWidth, imgHeight);
                heightLeft -= (pageHeight - 30);
                
                // Add new pages if content overflows
                while (heightLeft > 0) {
                    position = heightLeft - imgHeight;
                    pdf.addPage();
                    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                    heightLeft -= pageHeight;
                }
                
                // Save the PDF
                pdf.save('MathQuiz_Rapport.pdf');
                
                // Show success message
                showToast('PDF téléchargé avec succès!', 'success');
            } catch (error) {
                console.error('Error generating PDF:', error);
                showToast('Erreur lors de la génération du PDF', 'error');
            }
        }
        
        // Practice mode button
        document.getElementById('practiceButton').addEventListener('click', () => {
            showToast("Le mode entraînement sera disponible prochainement!", 'success');
        });
        
        // About button
        document.getElementById('aboutButton').addEventListener('click', () => {
            alert("MathQuiz est un outil d'évaluation conçu pour les élèves de 2e année secondaire en Belgique. Il couvre les concepts fondamentaux d'algèbre et de géométrie.");
        });
    });
</script>
